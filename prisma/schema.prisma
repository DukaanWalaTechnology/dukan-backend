generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  role         Role
  name         String?
  phone        String?
  address      String[]
  createdAt    DateTime      @default(now())
  isVerified   Boolean       @default(false)
  isRequested  Boolean       @default(false)
  orders       Order[]
  reviews      Review[]
  shops        Shop[]
  shopRequests ShopRequest[]
  interactions UserProduct[]
}

enum Role {
  USER
  SHOP_OWNER
  ADMIN
  DELIVERY_AGENT
}

model Shop {
  id           Int         @id @default(autoincrement())
  shopName     String
  ownerId      Int         @unique
  owner        User        @relation(fields: [ownerId], references: [id])
  address      String
  lat          Float?      // ✅ Added latitude
  lon          Float?     // ✅ Added longitude
  tradeName    String
  pinCode      Int?
  gstNumber    String
  foodLicense  String
  phone        String
  panNumber    String
  profileImage String?
  coverImage   String?
  bankDetails  String?
  isApproved   Boolean     @default(false)
  inventory    Inventory[]
  products     Product[]
  orders       Order[]
  reviews      Review[]
}

model Inventory {
  id          Int      @id @default(autoincrement())
  shopId      Int
  shop        Shop     @relation(fields: [shopId], references: [id])
  name        String
  description String
  price       Float
  quality     String
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  shopId      Int
  shop        Shop        @relation(fields: [shopId], references: [id])
  items       OrderItem[]
  status      OrderStatus
  totalPrice  Float
  placedAt    DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum OrderStatus {
  PLACED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
}

model Product {
  id          Int      @id @default(autoincrement())
  shopId      Int
  shop        Shop    @relation(fields: [shopId], references: [id])
  name        String
  description String
  price       Float
  discount    Int?
  category    String?
  stock       Int
  imageUrl    String
  interactions UserProduct[]

  OrderItem OrderItem[]
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  shopId      Int
  shop        Shop     @relation(fields: [shopId], references: [id])
  rating      Int      @default(0)
  comment     String?
  createdAt   DateTime @default(now())
}

model ShopRequest {
  id          Int           @id @default(autoincrement())
  shopName    String
  address     String
  lat         Float?        // ✅ Optional lat (for location lookup)
  lon         Float?        // ✅ Optional lon (for location lookup)
  tradeName   String
  pinCode     Int?
  gstNumber   String
  panNumber   String
  foodLicense String
  phone       String        @unique
  status      RequestStatus @default(PENDING)
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model UserProduct {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  productId     Int
  product       Product  @relation(fields: [productId], references: [id])
  interactionType String 
  createdAt     DateTime @default(now())
}
