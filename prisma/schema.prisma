// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role
  name      String?
  phone     String?
  address   String[]
  createdAt DateTime @default(now())
  orders    Order[]
  reviews   Review[]
  shops     Shop[]
  isVerified Boolean @default(false)

  ShopRequest ShopRequest[]
  interactions UserProduct[]
}

enum Role {
  USER
  SHOP_OWNER
  ADMIN
  DELIVERY_AGENT
}

model Shop {
  id           Int         @id @default(autoincrement())
  shopName     String
  ownerId      Int         @unique
  owner        User        @relation(fields: [ownerId], references: [id])
  address      String
  tradeName    String
  gstNumber    String
  panNumber    String
  foodLicense  String
  phone        String
  profileImage String?
  coverImage   String?
  bankDetails  String?
  isApproved   Boolean     @default(false)
  inventory    Inventory[]
  orders       Order[]
  reviews      Review[]

  Product Product[]
}

model Inventory {
  id          Int      @id @default(autoincrement())
  shopId      Int
  shop        Shop     @relation(fields: [shopId], references: [id])
  name        String
  description String
  price       Float
  quality     String
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  shopId     Int
  shop       Shop        @relation(fields: [shopId], references: [id])
  items      OrderItem[] // Many-to-many relationship with Product through OrderItem
  status     OrderStatus
  totalPrice Float
  placedAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum OrderStatus {
  PLACED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
}

model Product {
  id          Int      @id @default(autoincrement())
  shopId      Int
  shop        Shop     @relation(fields: [shopId], references: [id])
  orderItems  OrderItem[] // Many-to-many relationship with Order through OrderItem
  interactions UserProduct[]
  name        String
  description String
  price       Float
  discount    Int      @default(0)
  imageUrl    String?
  category    String?
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  shopId    Int
  shop      Shop     @relation(fields: [shopId], references: [id])
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
}

model ShopRequest {
  id          Int           @id @default(autoincrement())
  shopName    String
  address     String
  tradeName   String
  gstNumber   String
  panNumber   String
  foodLicense String
  phone       String        @unique
  status      RequestStatus @default(PENDING)
  userId      Int
  user        User          @relation(fields: [userId], references: [id]) 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model UserProduct {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  productId     Int
  product       Product  @relation(fields: [productId], references: [id])
  interactionType String // e.g., "wishlist", "viewed", "purchased"
  createdAt     DateTime @default(now())
}
